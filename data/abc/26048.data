{'TMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'COMPUTERNAME': '12345-PC', 'USERDOMAIN': '12345-PC', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 58 Stepping 9, GenuineIntel', 'VBOX_MSI_INSTALL_PATH': 'D:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '3a09', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Windows\\system32;C:\\Program Files (x86)\\Python35-32\\Scripts\\;C:\\Program Files (x86)\\Python35-32\\;D:\\Python27\\;D:\\Python27\\Scripts;E:\\Downloads\\nTrun_V2.6.0\\Goto;C:\\Program Files\\Python35\\Scripts\\;C:\\Program Files\\Python35\\;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;D:\\Program Files\\WIDCOMM\\Bluetooth Software\\;D:\\Program Files\\WIDCOMM\\Bluetooth Software\\syswow64;d:\\Program Files (x86)\\WinSCP\\;C:\\Program Files\\Microsoft Network Monitor 3\\;d:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files\\MySQL\\MySQL Enterprise Backup 4.0\\;d:\\Program Files\\Git\\cmd;C:\\ProgramData\\chocolatey\\bin;D:\\HashiCorp\\Vagrant\\bin', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'WINDOWS_TRACING_FLAGS': '3', 'TEMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'CHOCOLATEYLASTPATHUPDATE': 'Sun Sep 11 20:38:43 2016', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'USERPROFILE': 'C:\\Users\\Administrator', 'LOCALAPPDATA': 'C:\\Users\\Administrator\\AppData\\Local', 'HOMEPATH': '\\Users\\Administrator', 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk1.8.0_51', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Administrator', 'LOGONSERVER': '\\\\12345-PC', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'CHOCOLATEYTOOLSLOCATION': 'C:\\tools', 'MEMUHYPERV_PATH': 'D:\\Program Files\\Microvirt\\MEmuHyperv', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'APPDATA': 'C:\\Users\\Administrator\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '4', 'PROCESSOR_LEVEL': '6', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'MEMU_PATH': 'D:\\Program Files\\Microvirt'}